import { eq } from "drizzle-orm";
import { db } from "@/db/client";
import { product, user, userProductPrice } from "@/db/schema";

// Script para verificar configura√ß√£o de pre√ßos
async function checkPriceConfiguration() {
  try {
    console.log("=== Verifica√ß√£o de Configura√ß√£o de Pre√ßos ===");

    // Buscar produto ID 8
    const [productData] = await db
      .select({
        id: product.id,
        name: product.name,
        basePrice: product.basePrice,
        category: product.category,
      })
      .from(product)
      .where(eq(product.id, 8));

    if (!productData) {
      console.log("‚ùå Produto ID 8 n√£o encontrado");
      return;
    }

    console.log("\nüì¶ Produto:", {
      id: productData.id,
      name: productData.name,
      precoBase: `R$ ${productData.basePrice}`,
      category: productData.category,
    });

    // Buscar usu√°rio indicador
    const [referrerUser] = await db
      .select({
        id: user.id,
        referralCode: user.referralCode,
      })
      .from(user)
      .where(eq(user.referralCode, "4169"));

    if (!referrerUser) {
      console.log("‚ùå Usu√°rio indicador n√£o encontrado");
      return;
    }

    console.log("\nüë§ Indicador:", {
      id: referrerUser.id,
      referralCode: referrerUser.referralCode,
    });

    // Buscar pre√ßo personalizado
    const [customPriceData] = await db
      .select({
        customPrice: userProductPrice.customPrice,
        createdAt: userProductPrice.createdAt,
      })
      .from(userProductPrice)
      .where(
        eq(userProductPrice.userId, referrerUser.id) &&
          eq(userProductPrice.productId, 8),
      );

    if (!customPriceData) {
      console.log("‚ùå Pre√ßo personalizado n√£o encontrado para este indicador");
      return;
    }

    console.log("\nüí∞ Configura√ß√£o de Pre√ßos:", {
      precoBaseDoProduto: `R$ ${productData.basePrice}`,
      precoPersonalizadoDoIndicador: `R$ ${customPriceData.customPrice}`,
      diferencaParaComissao: `R$ ${(parseFloat(productData.basePrice) - parseFloat(customPriceData.customPrice)).toFixed(2)}`,
    });

    const basePriceNum = parseFloat(productData.basePrice);
    const customPriceNum = parseFloat(customPriceData.customPrice);
    const commission = basePriceNum - customPriceNum;

    console.log("\nüìä An√°lise:");

    if (commission > 0) {
      console.log(
        `‚úÖ Configura√ß√£o CORRETA - Comiss√£o de R$ ${commission.toFixed(2)} seria gerada`,
      );
      console.log(
        `   Quando algu√©m comprar por R$ ${basePriceNum}, o indicador paga R$ ${customPriceNum}`,
      );
    } else if (commission === 0) {
      console.log(`‚ö†Ô∏è  Configura√ß√£o NEUTRA - Sem comiss√£o (pre√ßos iguais)`);
      console.log(
        `   Sugest√£o: Diminuir pre√ßo personalizado do indicador para gerar comiss√£o`,
      );
    } else {
      console.log(
        `‚ùå Configura√ß√£o INCORRETA - Comiss√£o negativa de R$ ${commission.toFixed(2)}`,
      );
      console.log(`   Pre√ßo personalizado √© maior que o pre√ßo base!`);
    }

    console.log("\nüí° Para gerar comiss√µes:");
    console.log(
      `   - Pre√ßo que clientes pagam: R$ ${basePriceNum} (pre√ßo base do produto)`,
    );
    console.log(`   - Pre√ßo que indicador paga: Deve ser < R$ ${basePriceNum}`);
    console.log(
      `   - Sugest√£o: Definir pre√ßo personalizado como R$ ${(basePriceNum - 25).toFixed(2)} (comiss√£o de R$ 25,00)`,
    );
  } catch (error) {
    console.error("‚ùå Erro durante a verifica√ß√£o:", error);
  }
}

// Executar a verifica√ß√£o
checkPriceConfiguration().catch(console.error);
